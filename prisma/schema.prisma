generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum CategoryStatus {
  active
  inactive
  removed
}

enum ImportStatus {
  pending
  error
  done
  in_progress
}

enum TransactionType {
  BUY
  SELL
}

enum Status {
  ACTIVE
  REMOVED
}

model Asset {
  id                String                 @id @default(cuid())
  code              String                 @unique @db.VarChar(100)
  exchange          String                 @db.VarChar(100)
  shortname         String                 @db.VarChar(500)
  sector            String?                @db.VarChar(500)
  industry          String?                @db.VarChar(1000)
  type              String?                @db.VarChar(500)
  longname          String
  source            String                 @db.VarChar(100)
  current_price     Decimal?
  status            Status                 @default(ACTIVE)
  historical_prices AssetHistoricalPrice[]
  holdings          Holding[]
  transactions      Transaction[]
  created_at        DateTime               @default(now())
  updated_at        DateTime               @updatedAt

  @@map(name: "assets")
}

model AssetHistoricalPrice {
  id             String   @id @default(cuid())
  asset          Asset    @relation(fields: [asset_id], references: [id])
  asset_id       String
  date           DateTime @db.Date
  open           Decimal
  high           Decimal
  close          Decimal
  adjusted_close Decimal
  volume         BigInt

  @@unique([asset_id, date])
  @@map(name: "asset_historical_prices")
}

model Category {
  id         String         @id @default(cuid())
  user_id    String         @db.VarChar(160)
  name       String         @db.VarChar(80)
  status     CategoryStatus @default(active)
  created_at DateTime       @default(now()) @db.Timestamp(0)
  updated_at DateTime       @default(now()) @db.Timestamp(0)
  removed_at DateTime?      @db.Timestamp(0)
  holdings   Holding[]

  @@unique([user_id, name])
  @@map(name: "categories")
}

model Currency {
  id           String        @id @default(cuid())
  code         String        @unique @db.VarChar(10)
  name         String        @db.VarChar(200)
  portfolios   Portfolio[]
  transactions Transaction[]
  holdings     Holding[]

  @@map(name: "currencies")
}

model Holding {
  id           String    @id @default(cuid())
  user_id      String
  portfolio    Portfolio @relation(fields: [portfolio_id], references: [id])
  portfolio_id String
  asset        Asset     @relation(fields: [asset_id], references: [id])
  asset_id     String
  currency     Currency  @relation(fields: [currency_id], references: [id])
  currency_id  String
  category     Category? @relation(fields: [category_id], references: [id])
  category_id  String?
  transactions Int
  shares       Decimal
  average_cost Decimal
  status       Status    @default(ACTIVE)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  removed_at   DateTime?

  @@unique([portfolio_id, asset_id])
  @@index([asset_id])
  @@index([category_id])
  @@index([currency_id])
  @@map(name: "holdings")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(200)
  currency    Currency @relation(fields: [currency_id], references: [id])
  currency_id String
  status      Status   @default(ACTIVE)
  user_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  holdings            Holding[]
  transactions        Transaction[]
  transaction_imports TransactionImport[]

  @@unique([name, user_id])
  @@index([currency_id])
  @@map(name: "portfolios")
}

model Transaction {
  id             String          @id @default(cuid())
  date           DateTime        @db.Date
  user_id        String
  portfolio      Portfolio       @relation(fields: [portfolio_id], references: [id])
  portfolio_id   String
  asset          Asset           @relation(fields: [asset_id], references: [id])
  asset_id       String
  currency       Currency        @relation(fields: [currency_id], references: [id])
  currency_id    String
  shares         Decimal
  cost_per_share Decimal
  type           TransactionType
  created_at     DateTime        @default(now())

  @@index([asset_id])
  @@index([currency_id])
  @@index([portfolio_id])
  @@map(name: "transactions")
}

model TransactionImport {
  id           String       @id @default(cuid())
  user_id      String
  portfolio_id String
  portfolio    Portfolio    @relation(fields: [portfolio_id], references: [id])
  status       ImportStatus @default(pending)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt()

  assets TransactionImportAsset[]

  @@index([portfolio_id])
  @@map(name: "transaction_imports")
}

model TransactionImportAsset {
  id                    String          @id @default(cuid())
  transaction_import_id String
  date                  DateTime
  type                  TransactionType
  asset                 String
  shares                Decimal
  cost_per_share        Decimal
  currency              String
  category              String
  status                ImportStatus    @default(pending)
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt()

  import TransactionImport @relation(fields: [transaction_import_id], references: [id])

  @@index([transaction_import_id])
  @@map(name: "transaction_import_assets")
}
